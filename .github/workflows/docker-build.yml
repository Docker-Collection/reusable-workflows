name: Reusable Docker

on:
  workflow_call:
    inputs:
      ### Docker Name
      repo_name:
        description: "Summary generate name, default will use repo name"
        required: false
        type: string
        default: "${{ github.repository }}"
      docker_name:
        description: "ghcr.io push name"
        required: true
        type: string
      ###

      ### Docker Settings
      publish:
        description: "Push Image to ghcr.io, default is always push" 
        required: false
        type: boolean
        default: true
      context:
        description: "Custom file path"
        required: false
        type: string
      dockerfile:
        description: "Docker file name, default ``Dockerfile``"
        required: false
        type: string
        default: "Dockerfile"
      platforms:
        description: "Image support platforms, default ``linux/amd64,linux/arm64``"
        required: false
        type: string
        default: "linux/amd64,linux/arm64"

      ### Docker Labeling ###
      docker_label_author:
        description: "Docker Label: Author"
        required: true
        type: string
      docker_label_title:
        description: "Docker Label: Title"
        required: false
        type: string
      docker_label_description:
        description: "Docker Label: Description"
        required: false
        type: string
      ###

      ### Version Detecter ###
      version_detecter:
        description: "Enable version detecter, default ``false``"
        required: false
        type: boolean
        default: false
      version_detecter_file:
        description: "File of detect version string, default ``Dockerfile``"
        required: false
        type: string
        default: "Dockerfile"
      version_detecter_var:
        description: "Placeholder of detect"
        required: false
        type: string
      version_detecter_cut:
        description: "Cut number, default ``2``"
        required: false
        type: string
        default: "2"
      ###

      ### Build Args ###
      build_args:
        description: "Build Args"
        required: false
        type: boolean
        default: false
      ###

      ### Special Build Args ###
      special_build:
        description: "Special step for generate buildtime from docker meta step"
        required: false
        type: boolean
        default: false
      special_build_args:
        description: "Special step of the build time var name"
        required: false
        type: string
      ###

permissions:
  contents: read
  packages: write

jobs:
  docker-test:
    name: Docker Build (Test)
    runs-on: ubuntu-latest
    steps:
      - name: Checking Repository
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2

      - name: Setup multiarch
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # v2.2.0

      - name: Setup Buildx
        uses: docker/setup-buildx-action@6a58db7e0d21ca03e6c44877909e80e45217eed2 # v2.6.0

      - name: Cache Docker layers
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
        with:
          path: /tmp/.buildx-cache
          key: ${{ github.repository }}-${{ github.workflow }}-${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ github.repository }}-${{ github.workflow }}-${{ runner.os }}-buildx-

      - name: Build & Test
        uses: docker/build-push-action@44ea916f6c540f9302d50c2b1e5a8dc071f15cdf # v4.1.0
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          platforms: ${{ inputs.platforms }}
          push: false
          tags: ${{ inputs.docker_name }}:test
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  docker-publish:
    name: Docker Build (Publish)
    runs-on: ubuntu-latest
    needs: [ docker-test ]
    if: github.event_name != 'pull_request'
    steps:
      - name: Checking Repository
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2

      - name: Setup multiarch
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # v2.2.0

      - name: Setup Buildx
        uses: docker/setup-buildx-action@6a58db7e0d21ca03e6c44877909e80e45217eed2 # v2.6.0

      - name: Cache Docker layers
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
        with:
          path: /tmp/.buildx-cache
          key: ${{ github.repository }}-${{ github.workflow }}-${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ github.repository }}-${{ github.workflow }}-${{ runner.os }}-buildx-

      - name: Login ghcr.io
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Detect Version
        id: detect_version
        if: ${{ inputs.version_detecter }}
        run: |
          version=$(grep '${{ inputs.version_detecter_var }}' ${{ inputs.version_detecter_file }} | cut -d "=" -f ${{ inputs.version_detecter_cut }})
          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "## ${{ inputs.repo_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Detect Image Version: ${version}" >> $GITHUB_STEP_SUMMARY

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@2c0bd771b40637d97bf205cbccdd294a32112176 # v4.5.0
        with:
          images: |
            ${{ inputs.docker_name }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}},value=${{ steps.detect_version.outputs.version }}
          labels: |
            org.opencontainers.image.authors=${{ inputs.docker_label_author }}
            org.opencontainers.image.title=${{ inputs.docker_label_title }}
            org.opencontainers.image.description=${{ inputs.docker_label_description }}

      - name: Build & Push
        if: ${{ ! inputs.special_build }}
        uses: docker/build-push-action@44ea916f6c540f9302d50c2b1e5a8dc071f15cdf # v4.1.0
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          platforms: ${{ inputs.platforms }}
          push: ${{ inputs.publish }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            ${{ inputs.build_args }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Build & Push (Special Build Args)
        if: ${{ inputs.special_build }}
        uses: docker/build-push-action@44ea916f6c540f9302d50c2b1e5a8dc071f15cdf # v4.1.0
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: ${{ inputs.publish }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            ${{ inputs.special_build_args }}=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
